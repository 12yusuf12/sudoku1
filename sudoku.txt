#include <iostream>
#define S 9
using namespace std;
int sudoku[S][S] = {

    {5, 3, 0, 0, 7, 0, 0, 0, 0},
    {6, 0, 0, 1, 9, 5, 0, 0, 0},
    {0, 9, 8, 0, 0, 0, 0, 6, 0},
    {8, 0, 0, 0, 6, 0, 0, 0, 3},
    {4, 0, 0, 8, 0, 3, 0, 0, 1},
    {7, 0, 0, 0, 2, 0, 0, 0, 6},
    {0, 6, 0, 0, 0, 0, 2, 8, 0},
    {0, 0, 0, 4, 1, 9, 0, 0, 5},
    {0, 0, 0, 0, 8, 0, 0, 7, 9}

};

bool Row(int row, int num){
   for (int col = 0; col < S; col++)
      if (sudoku[row][col] == num)
         return true;
   return false;
}

bool Column(int col, int num){
   for (int row = 0; row < S; row++)
      if (sudoku[row][col] == num)
         return true;
   return false;
}

bool divideby3(int Row3, int Col3, int num){

   for (int row = 0; row < 3; row++)
      for (int col = 0; col < 3; col++)
         if (sudoku[row+Row3][col+Col3] == num)
            return true;
   return false;
}

void Grid(){

   for (int row=0; row<S; row++){
      for (int col=0; col<S; col++){

         if(col==3 || col==6)
            cout << "|";
         cout << sudoku[row][col] <<" ";
      }
      if(row==2 || row==5){
         cout << endl;
         for(int i=0; i<S; i++)
            cout<<"---";
      }
      cout<<endl;
   }
}

bool Empty(int &row, int &col){
   for (row=0; row<S; row++)

      for (col=0; col<S; col++)

         if (sudoku[row][col] == 0)
            return true;

   return false;
}

bool validplc(int row, int col, int num){
   return !Row(row, num) && !Column(col, num) && !divideby3(row - row%3 ,col - col%3, num);
}

bool solveSudoku(){
   int row, col;

   if (!Empty(row, col))
      return true;

   for (int num=1; num<=9; num++){

      if (validplc(row, col, num))
      {
         sudoku[row][col] = num;

         if (solveSudoku())
            return true;
         sudoku[row][col] = 0;
      }
   }
   return false;
}

int main(){
   if (solveSudoku()==true){
    cout <<"Solution: "<<endl;
      Grid();
   }
   else
      cout <<"sudoku is no solution: ";
}
